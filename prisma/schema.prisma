generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String          @id @default(uuid())
  email          String          @unique
  name           String?
  avatarUrl      String?         @map("avatar_url")
  parentChatId   String?         @map("parent_chat_id")
  parentReportsEnabled Boolean   @default(false) @map("parent_reports_enabled")
  createdAt      DateTime        @default(now())  @map("created_at")
  updatedAt      DateTime        @updatedAt       @map("updated_at")

  tasks          Task[]
  moods          Mood[]
  focusSessions  FocusSession[]
  reflections    Reflection[]
  emergencyLogs  EmergencyLog[]
}

model Task {
  id          Int      @id @default(autoincrement())
  userId      String
  title       String
  description String?
  completed   Boolean  @default(false)
  completedAt DateTime?
  dueDate     DateTime?
  priority    Int?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Mood {
  id        Int      @id @default(autoincrement())
  userId    String
  mood      String
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model FocusSession {
  id        Int      @id @default(autoincrement())
  userId    String
  startTime DateTime
  duration  Int       // in seconds
  createdAt DateTime  @default(now())

  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Reflection {
  id            Int      @id @default(autoincrement())
  userId        String
  sessionDate   DateTime @default(now())
  stayedFocused Boolean
  distractions  String?
  duration      Int

  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model EmergencyLog {
  id         Int      @id @default(autoincrement())
  userId     String
  issue      String
  aiResponse String
  createdAt  DateTime @default(now())

  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
